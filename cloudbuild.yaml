# Cloud Build Configuration which:
# (1) Builds, tests, and pushes gcr.io/$PROJECT_ID/xla:$BUILD_ID RoBERTa image

# TODO Replace remote-builder with custom workers currently in (alpha)[https://cloud.google.com/cloud-build/docs/custom-worker-pool] 
steps:
- name: gcr.io/$PROJECT_ID/remote-builder
  waitFor: ["-"]
  timeout: 1200s
  env:
    # Install nfs, docker in worker host
    - COMMAND1=sudo apt-get -y install nfs-common curl && sudo curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh && sudo usermod -aG docker ${_USERNAME}
    # Mount the NFS share to workspace
    - COMMAND2=sudo mkdir -p ${_MOUNT_POINT} && sudo mount ${_NFS_IP}:/${_SHARED_FS} ${_MOUNT_POINT} &&  sudo chmod go+rw ${_MOUNT_POINT} && df -kh && ls -al ${_MOUNT_POINT}
    # Copy the Roberta files to dataset
    - COMMAND3=if [ -d "${_MOUNT_POINT}/code" ]; then echo "using existing ${_MOUNT_POINT}/code directory"; else sudo mkdir -p ${_MOUNT_POINT}/code && sudo git clone ${_CODE_REPO} ${_MOUNT_POINT}/code/; fi
    # Create the dataset folder and download the dataset
    - COMMAND4=if [ -d "${_MOUNT_POINT}/data" ]; then echo "using existing ${_MOUNT_POINT}/data directory"; else sudo mkdir -p ${_MOUNT_POINT}/data && sudo gsutil -m cp -r ${_GCS_DATASET} ${_MOUNT_POINT}/data/; fi && sudo umount ${_MOUNT_POINT}
    # Create the docker NFS volume
    - COMMAND5=docker volume create --driver local --opt type=nfs --opt o=addr=${_NFS_IP} --opt device=:/${_SHARED_FS} ${_SHARED_FS}
    # Build the appropriate nightly container, pull it and copy the startup script into to workspace 
    - COMMAND6=df -kh && cd /home/${_USERNAME}/workspace/ && docker build --build-arg IMAGE_NIGHTLY=${_IMAGE_NIGHTLY} --tag gcr.io/$PROJECT_ID/xla:$BUILD_ID .
    # TODO Manual docker registry to address issues related to docker-credential-gcr not working properly
    - COMMAND7=sudo docker login -u oauth2accesstoken -p "$(sudo gcloud auth print-access-token)" https://gcr.io
    # Run the container : Copy files from GCS, clone the taylan@ roberta repo. Push the container to repo with a tag 
    - COMMAND8=cd /home/${_USERNAME}/workspace/ && docker run -d -v ${_SHARED_FS}:${_MOUNT_POINT} gcr.io/$PROJECT_ID/xla:$BUILD_ID ./setup_nightly.sh ${_MOUNT_POINT} && sudo docker push gcr.io/$PROJECT_ID/xla:$BUILD_ID
    - ZONE=${_ZONE}
    # TODO: Service account.  Add service account so that you can set nessaary on permissions from terraform
    - INSTANCE_ARGS=--image-project ubuntu-os-cloud --image-family ubuntu-1804-lts --boot-disk-type=pd-ssd --machine-type n1-standard-16 --boot-disk-size=200 --scopes=storage-rw,logging-write,monitoring,service-management,pubsub,service-control,trace
    - USERNAME=${_USERNAME}
substitutions:
    _USERNAME: me # default value
    # TODO: Service account.  Add service account so that you can set nessaary on permissions from terraform
    # _SERVICE_ACCOUNT: 509537169428@cloudbuild.gserviceaccount.com
    _MOUNT_POINT: /mnt/common 
    _SHARED_FS: nytpushare
    _NFS_IP: 10.241.173.146
    _ZONE: europe-west4-a
    _IMAGE_NIGHTLY: ""
    _GCS_DATASET: gs://tpu-demo-eu/dataset/*
    _CODE_REPO: https://github.com/taylanbil/fairseq.git 
timeout: 1500s

## TODO Cloud Build TF, Build NFS, TPU, save enviroment in workspace, load those in preceeding module
- id: 'tf create tpu & NFS share'
  name: 'hashicorp/terraform:0.12.20'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "modules/terraform-google-filestore-tpu/" ]; then
        cd modules/terraform-google-filestore-tpu
        terraform plan
      else
        for dir in modules/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd ../../
        done
      fi 


# TODO Cloud Build TF to build worker instances


# TODO Cloud build to refresh instances based on changes to github
## -  Entire worker
## -  Githbu instances 

# TODO CLoud build TF to turn off enviroment and save data to GCS bucket, watch github page. 


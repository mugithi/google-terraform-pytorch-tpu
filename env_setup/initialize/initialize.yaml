steps:
- id: stage-remote-builder
  name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/remote-builder', '.' ]
  dir: env_setup/initialize

- id: stage-harshicorp-image
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  args: 
  - '-c'
  - |  
      TF_VER=0.12.16 
      docker pull hashicorp/terraform:$$TF_VER
      docker tag hashicorp/terraform:0.12.16 gcr.io/$PROJECT_ID/terraform:$$TF_VER

# Create GCS Buckets
- id: stage-create-gcs-buckets
  name: gcr.io/$PROJECT_ID/terraform:0.12.16
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
        source values.env
        RED='\033[0;32m'
        NC='\033[0m'
        cd env_setup/terraform-google-gcs  
        trap cleanup EXIT
        function cleanup {
          if [ "$?" == "0" ]
          then 
            echo -e "$${RED} "Succeeded in creating the GCS buckets $${NC}"
            exit 0
          else
            echo -e "$${RED} The enviroment marked by ENV_BUILD_NAME: $$ENV_BUILD_NAME has already been initialized and cannot be initialized again $${NC}"
            echo -e "$${RED} "Please change this variable and try initializing again $${NC}"
            exit 0
          fi
        }
        if [ -d "modules/terraform-google-gcs/" ]; then
          terraform init 
          terraform apply -auto-approve \
              -var="project_id=$${PROJECT_ID}" \
              -var="gcs_tf_backend=$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend" \
              -var="gcs_scripts=$${PROJECT_ID}-$${ENV_BUILD_NAME}-scripts" \
              -var="gcs_dataset=$${PROJECT_ID}-$${ENV_BUILD_NAME}-dataset" 
        fi

# Sync workplace to GCS bucket
- id: sync_tf_backend_with_workspace
  name: 'gcr.io/cloud-builders/gsutil'
  entrypoint: 'bash'
  args: 
  - '-c'
  - |
     source values.env
     gsutil rsync -r '/workspace/' gs://$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend

steps:
- id: stage-remote-builder
  name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/remote-builder', '.' ]
  dir: env_setup/initialize
- id: stage-harshicorp-image
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  args: 
  - '-c'
  - |  
      TF_VER=0.12.16 
      docker pull hashicorp/terraform:$$TF_VER
      docker tag hashicorp/terraform:0.12.16 gcr.io/$PROJECT_ID/terraform:$$TF_VER
      docker push gcr.io/$PROJECT_ID/terraform:$$TF_VER
# Create GCS Buckets
- id: stage-create-gcs-buckets
  name: gcr.io/$PROJECT_ID/terraform:0.12.16
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
        source values.env
        source values.env.auto
        function cleanup {
          if [ "$?" == "0" ]
          then 
            echo -e "$${GREEN}Succeeded in creating the $${ENV_BUILD_NAME} GCS buckets $${NC}"
          else
            echo -e "$${RED}The enviroment marked by the values.env variable ENV_BUILD_NAME=$$ENV_BUILD_NAME has already been initialized and cannot be initialized again $${NC}"
            echo -e "$${RED}Please change this variable and try running the initializing command.. $${NC}" 
            echo -e "$${RED}command |-> gcloud builds submit --config=cloudbuild.yaml --substitutions _BUILD_ACTION=initialize $${NC}"
            echo -e "$${RED}Please note that changing the values.env variable ENV_BUILD_NAME=$$ENV_BUILD_NAME will create a new training environment  $${NC}"
            exit 0 
          fi
        }
        trap cleanup EXIT
        cd env_setup/terraform-google-gcs
        terraform init 
        terraform apply -lock=false -auto-approve \
            -var="project_id=$${PROJECT_ID}" \
            -var="gcs_tf_backend=$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend" \
            -var="gcs_dataset=$${PROJECT_ID}-$${ENV_BUILD_NAME}-dataset" 
# Sync workplace to GCS bucket
- id: sync_tf_backend_with_workspace
  name: 'gcr.io/cloud-builders/gsutil'
  waitFor:
  - stage-create-gcs-buckets
  entrypoint: 'bash'
  args: 
  - '-c'
  - |
     source values.env
     source values.env.auto
     gsutil -m rsync -u -r -P /workspace gs://$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend/workspace/
     echo -e "$${GREEN} Synced /workpace with the gcs bucket gs://$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend/workspace $${NC}"
images: ['gcr.io/$PROJECT_ID/remote-builder']
steps:
- id: terraform-google-filestore-tpu
  name: hashicorp/terraform:0.12.16
  entrypoint: 'sh'
  env:
  - 'PROJECT=$PROJECT_ID'
  - 'REV=$REVISION_ID'
  args: 
  - '-c'
  - |  
      set -xe
      source ../../values.env
      if [ "$(cat /workspace/vars/exit_status.vars)" != "exit 0" ]
      then 
        echo "exit 1" > /workspace/vars/exit_status.vars
        echo "WARNING - Skipping creating TPU and Filestore"
        exit 0
      fi
      trap cleanup EXIT
      function cleanup {
        if [ "$?" == "0" ]
        then 
          echo "Success! Configuration applied"
          terraform output nfs_ip > /workspace/vars/nfs_ip.vars
          terraform output default_account > /workspace/vars/default_account.vars
          terraform output tpu_name > /workspace/vars/tpu_name.vars
          terraform output tpu_project > /workspace/vars/tpu_project.vars
          terraform output tpu_zone > /workspace/vars/tpu_zone.vars
        else
          echo "exit 1" > /workspace/vars/exit_status.vars
          terraform destroy -auto-approve \
            -var="project_id=${PROJECT_ID}" \
            -var="region=${REGION}" \
            -var="zone=${ZONE}" 
          exit 0
        fi
      }
      if [ -d "env_setup/terraform-google-filestore-tpu/" ]; then
        cd env_setup/terraform-google-filestore-tpu
        terraform init \
            -backend-config="bucket=${PROJECT_ID}-${ENV_BUILD_NAME}-tpu-backend" \
            -backend-config="prefix=terraform-google-filestore-tpu"
        terraform plan \
            -var="project_id=${PROJECT_ID}" \
            -var="region=${REGION}" \
            -var="zone=${ZONE}" \
            -var="pytorch_proj_name=${PROJECT_ID}" \
            -var="accelerator_type=${ACCELERATOR_TYPE}" \
            -var="tpu_name=${PROJECT_ID}-${ACCELERATOR_TYPE}-${ENV_BUILD_NAME}" \
            -var="filestore_name=${PROJECT_ID}-${ACCELERATOR_TYPE}-${ENV_BUILD_NAME}" \
            -var="pytorch_version=${PYTORCH_VERSION}" \
            -var="cidr_block=${TPU_CIDR_BLOCK}" \
            -var="nightly_image=${DOCKER_IMAGE_VERSION}" \
            -var="machine_type=${MACHINE_TYPE}" \
            -var="script_bucket_url=${PROJECT_ID}-${ENV_BUILD_NAME}-tpu-scripts" \
            -var="tpu_shares_name=${SHARED_FS}"
        terraform apply -auto-approve \
            -var="project_id=${PROJECT_ID}" \
            -var="region=${REGION}" \
            -var="zone=${ZONE}" \
            -var="pytorch_proj_name=${PROJECT_ID}" \
            -var="accelerator_type=${ACCELERATOR_TYPE}" \
            -var="tpu_name=${PROJECT_ID}-${ACCELERATOR_TYPE}-${ENV_BUILD_NAME}" \
            -var="filestore_name=${PROJECT_ID}-${ACCELERATOR_TYPE}-${ENV_BUILD_NAME}" \
            -var="pytorch_version=${PYTORCH_VERSION}" \
            -var="cidr_block=${TPU_CIDR_BLOCK}" \
            -var="nightly_image=${DOCKER_IMAGE_VERSION}" \
            -var="machine_type=${MACHINE_TYPE}" \
            -var="script_bucket_url=${PROJECT_ID}-${ENV_BUILD_NAME}-tpu-scripts" \
            -var="tpu_shares_name=${SHARED_FS}"
        echo "exit 0" > /workspace/vars/exit_status_nfs_tpu.vars
      fi 
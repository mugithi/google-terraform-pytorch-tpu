steps:
  - id: terraform-google-disk-seed
    name: gcr.io/$PROJECT_ID/terraform:0.12.16
    entrypoint: 'sh'
    args: 
    - '-c'
    - |  
        set -xe
        source values.env
        function cleanup {
            if [ "$?" == "0" ]
            then
              echo -e "$${GREEN}Succeeded with $${PROJECT_ID}-$${ENV_BUILD_NAME}-disk build operations $${NC}"
            else 
              echo -e "$${RED}Did not succeed with $${PROJECT_ID}-$${ENV_BUILD_NAME}-disk build operations $${NC}"
              exit 0
            fi
        }
        trap cleanup EXIT
        cd env_setup/terraform-google-disk
        terraform init \
            -backend-config="bucket=$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend" \
            -backend-config="prefix=terraform-google-$${ENV_BUILD_NAME}-disk"
        terraform apply --auto-approve \
            -var="project_id=$${PROJECT_ID}" \
            -var="region=$${REGION}" \
            -var="zone=$${ZONE}" \
            -var="network=$${NETWORK}" \
            -var="shared_pd_disk_name=$${SHARED_PD_DISK_TYPE}-$${SHARED_PD_DISK_SIZE}-$${ENV_BUILD_NAME}" \
            -var="shared_pd_disk_size=$${SHARED_PD_DISK_SIZE}" \
            -var="shared_pd_disk_type=$${SHARED_PD_DISK_TYPE}" \
            -var="protocol=$${PROTOCOL}" \
            -var="ports=$${PORTS}" \
            -var="source_ranges=$${SOURCE_RANGES}" \
            -var="tags=$${TAGS}"  
  - id: remote-builder-seed-disk
    name: gcr.io/$PROJECT_ID/remote-builder
    timeout: 4000s 
    waitFor: 
    - terraform-google-disk-seed 
    env:
      ## Use this script to parepare the data
      - COMMAND1=bash -xe  /tmp/scripts/data_prep_script.sh
      ## Upload the data to GCS - DO NOT MODIFY
      - COMMAND2=bash -xe  /tmp/scripts/seed_shared_disk_pd.sh
    

  - id: terraform-google-disk-cleanup
    name: gcr.io/$PROJECT_ID/terraform:0.12.16
    waitFor: 
      - remote-builder-seed-disk 
    entrypoint: 'sh'
    args: 
    - '-c'
    - |  
        set -xe
        source values.env
        function cleanup {
            if [ "$?" == "0" ]
            then
              echo -e "$${GREEN}Succeeded with $${PROJECT_ID}-$${ENV_BUILD_NAME}-disk build operations $${NC}"
            else 
              echo -e "$${RED}Did not succeed with $${PROJECT_ID}-$${ENV_BUILD_NAME}-disk build operations $${NC}"
              exit 0
            fi
        }
        trap cleanup EXIT
        cd env_setup/terraform-google-disk
        terraform init \
            -backend-config="bucket=$${PROJECT_ID}-$${ENV_BUILD_NAME}-tf-backend" \
            -backend-config="prefix=terraform-google-$${ENV_BUILD_NAME}-disk"
        terraform destroy --auto-approve -target=google_compute_instance.disk_instance -target=module.firewall.google_compute_firewall.allow_fw \
            -var="project_id=$${PROJECT_ID}" \
            -var="region=$${REGION}" \
            -var="zone=$${ZONE}" \
            -var="network=$${NETWORK}" \
            -var="shared_pd_disk_name=$${SHARED_PD_DISK_TYPE}-$${SHARED_PD_DISK_SIZE}-$${ENV_BUILD_NAME}" \
            -var="shared_pd_disk_size=$${SHARED_PD_DISK_SIZE}" \
            -var="shared_pd_disk_type=$${SHARED_PD_DISK_TYPE}" \
            -var="protocol=$${PROTOCOL}" \
            -var="ports=$${PORTS}" \
            -var="source_ranges=$${SOURCE_RANGES}" \
            -var="tags=$${TAGS}"  
timeout: 4000s 
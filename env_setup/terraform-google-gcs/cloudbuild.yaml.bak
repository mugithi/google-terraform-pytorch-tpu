steps:
# Create GCS Buckets
- id: terraform-google-gcs
  name: hashicorp/terraform:0.12.16
  entrypoint: 'sh'
  args: 
  - '-c'
  - |  
      set -xe
      source values.env
      trap cleanup EXIT
      mkdir -p vars/
      function cleanup {
          if [ "$?" == "0" ]
          then 
            echo "Success! Configuration applied"
            echo $(terraform output backend_bucket_url) > /workspace/vars/backend_bucket_url.vars
            echo $(terraform output script_bucket_url) > /workspace/vars/script_bucket_url.vars
            echo "exit 0" > /workspace/vars/exit_status.vars
          else
            echo "exit 1" > /workspace/vars/exit_status.vars
            echo "exit 0" > /workspace/vars/exit_status_nfs_tpu.vars
            exit 0
          fi
      }
      if [ ${_BUILD_ACTION} == 'create' ]
      then
        cd env_setup/terraform-google-gcs  
        terraform init 
        terraform apply -auto-approve \
            -var="project_id=$${PROJECT_ID}" \
            -var="pytorch_proj_name=$${PROJECT_ID}" \
            -var="gcs_tf_backend=$${PROJECT_ID}-$${TRAINING_RUN_NAME}-tpu-backend" \
            -var="gcs_scripts=$${PROJECT_ID}-$${TRAINING_RUN_NAME}-tpu-scripts" 
      fi 
      if [ ${_BUILD_ACTION} == 'destroy' ]
      then
        cd env_setup/terraform-google-gcs  
        terraform init 
        terraform destroy -auto-approve \
            -var="project_id=$${PROJECT_ID}" \
            -var="pytorch_proj_name=$${PROJECT_ID}" \
            -var="gcs_tf_backend=$${PROJECT_ID}-$${TRAINING_RUN_NAME}-tpu-backend" \
            -var="gcs_scripts=$${PROJECT_ID}-$${TRAINING_RUN_NAME}-tpu-scripts" 
      fi 